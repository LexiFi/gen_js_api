[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
module JsArray(E:Ojs.T) =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Jsoo_runtime.Js.new_obj
             (Jsoo_runtime.Js.get (Jsoo_runtime.Js.pure_js_expr "globalThis")
                (Ojs.string_to_js "Array")) [||])
    let (push : t -> E.t -> unit) =
      fun (x4 : t) ->
        fun (x3 : E.t) ->
          ignore
            (Jsoo_runtime.Js.meth_call (t_to_js x4) "push" [|(E.t_to_js x3)|])
    let (pop : t -> E.t option) =
      fun (x5 : t) ->
        Ojs.option_of_js E.t_of_js
          (Jsoo_runtime.Js.meth_call (t_to_js x5) "pop" [||])
  end
module UntypedArray = struct include (JsArray)(Ojs) end
module StringArray =
  struct
    include (JsArray)(Ojs.String)
    let (join : t -> string -> string) =
      fun (x8 : t) ->
        fun (x7 : string) ->
          Ojs.string_of_js
            (Jsoo_runtime.Js.meth_call (t_to_js x8) "join"
               [|(Ojs.string_to_js x7)|])
  end
module JsArray2 =
  struct
    type 'a t = Ojs.t
    let rec t_of_js : 'a . (Ojs.t -> 'a) -> Ojs.t -> 'a t =
      fun (type __a) ->
        fun (__a_of_js : Ojs.t -> __a) -> fun (x10 : Ojs.t) -> x10
    and t_to_js : 'a . ('a -> Ojs.t) -> 'a t -> Ojs.t =
      fun (type __a) ->
        fun (__a_to_js : __a -> Ojs.t) -> fun (x9 : Ojs.t) -> x9
    let (create : unit -> 'a t) =
      fun () ->
        t_of_js Obj.magic
          (Jsoo_runtime.Js.new_obj
             (Jsoo_runtime.Js.get (Jsoo_runtime.Js.pure_js_expr "globalThis")
                (Ojs.string_to_js "Array")) [||])
    let (create' : (module Ojs.T with type t = 'a) -> 'a list -> 'a t) =
      fun (type a) ->
        fun ((module A)  : (module Ojs.T with type t = a)) ->
          fun (x12 : a list) ->
            t_of_js A.t_of_js
              (Jsoo_runtime.Js.new_obj_arr
                 (Jsoo_runtime.Js.get
                    (Jsoo_runtime.Js.pure_js_expr "globalThis")
                    (Ojs.string_to_js "Array"))
                 (let x13 =
                    Jsoo_runtime.Js.new_obj
                      (Jsoo_runtime.Js.get
                         (Jsoo_runtime.Js.pure_js_expr "globalThis")
                         (Ojs.string_to_js "Array")) [||] in
                  List.iter
                    (fun (x14 : a) ->
                       ignore
                         (Jsoo_runtime.Js.meth_call x13 "push"
                            [|(A.t_to_js x14)|])) x12;
                  x13))
    let (push : (module Ojs.T with type t = 'a) -> 'a t -> 'a -> unit) =
      fun (type a) ->
        fun ((module A)  : (module Ojs.T with type t = a)) ->
          fun (x17 : a t) ->
            fun (x16 : a) ->
              ignore
                (Jsoo_runtime.Js.meth_call (t_to_js A.t_to_js x17) "push"
                   [|(A.t_to_js x16)|])
    let (pop : (module Ojs.T with type t = 'a) -> 'a t -> 'a option) =
      fun (type a) ->
        fun ((module A)  : (module Ojs.T with type t = a)) ->
          fun (x19 : a t) ->
            Ojs.option_of_js A.t_of_js
              (Jsoo_runtime.Js.meth_call (t_to_js A.t_to_js x19) "pop" [||])
    let (get : (module Ojs.T with type t = 'a) -> 'a t -> int -> 'a option) =
      fun (type a) ->
        fun ((module A)  : (module Ojs.T with type t = a)) ->
          fun (x22 : a t) ->
            fun (x24 : int) ->
              Ojs.option_of_js A.t_of_js
                (Jsoo_runtime.Js.get (t_to_js A.t_to_js x22)
                   (Ojs.int_to_js x24))
    let (set : (module Ojs.T with type t = 'a) -> 'a t -> int -> 'a -> unit)
      =
      fun (type a) ->
        fun ((module A)  : (module Ojs.T with type t = a)) ->
          fun (x26 : a t) ->
            fun (x28 : int) ->
              fun (x29 : a) ->
                Jsoo_runtime.Js.set (t_to_js A.t_to_js x26)
                  (Ojs.int_to_js x28) (A.t_to_js x29)
    let (join : string t -> string -> string) =
      fun (x31 : string t) ->
        fun (x30 : string) ->
          Ojs.string_of_js
            (Jsoo_runtime.Js.meth_call (t_to_js Ojs.string_to_js x31) "join"
               [|(Ojs.string_to_js x30)|])
  end
