module Issue116 : sig type t end =
  ((struct
      [@@@js.dummy "!! This code has been generated by gen_js_api !!"]
      [@@@ocaml.warning "-7-32-39"]
      type t = Ojs.t
      let rec (t_of_js : Ojs.t -> t) = fun x2 -> x2
      and (t_to_js : t -> Ojs.t) = fun x1 -> x1
    end)[@merlin.hide ]) 
module Issue117 :
  sig module T : sig val log : 'a -> unit val log2 : 'a -> 'b -> unit end end
  =
  ((struct
      [@@@js.dummy "!! This code has been generated by gen_js_api !!"]
      [@@@ocaml.warning "-7-32-39"]
      module T =
        struct
          let (log : 'a -> unit) =
            fun x3 ->
              ignore
                (Ojs.call (Ojs.get_prop_ascii Ojs.global "console") "log"
                   [|(Obj.magic x3)|])
          let (log2 : 'a -> 'b -> unit) =
            fun x4 ->
              fun x5 ->
                ignore
                  (Ojs.call (Ojs.get_prop_ascii Ojs.global "console")
                     "jsLog2" [|(Obj.magic x4);(Obj.magic x5)|])
        end
    end)[@merlin.hide ]) 
module Issue124 :
  sig
    type a
    and b = {
      a: a }
    type 'a dummy
    type 'a wrapped =
      | Wrapped of 'a 
    type u =
      | Unknown of Ojs.t 
      | T of t 
      | WrappedT of t wrapped 
    and t = [ `U of u ] dummy
    type ('a, 'b) base = [ `BaseA of 'a  | `BaseB of 'b ] dummy
    type base1 = (int, string) base
    type base2 = (string, int) base
  end =
  ((struct
      [@@@js.dummy "!! This code has been generated by gen_js_api !!"]
      [@@@ocaml.warning "-7-32-39"]
      type a = Ojs.t
      and b = {
        a: a }
      let rec (a_of_js : Ojs.t -> a) = fun x7 -> x7
      and (a_to_js : a -> Ojs.t) = fun x6 -> x6
      and (b_of_js : Ojs.t -> b) = fun js -> { a = (a_of_js js) }
      and (b_to_js : b -> Ojs.t) = fun { a } -> a_to_js a
      type 'a dummy = Ojs.t
      let rec (dummy_of_js : (Ojs.t -> 'a) -> Ojs.t -> 'a dummy) =
        fun _ -> fun x9 -> x9
      and (dummy_to_js : ('a -> Ojs.t) -> 'a dummy -> Ojs.t) =
        fun _ -> fun x8 -> x8
      type 'a wrapped =
        | Wrapped of 'a 
      let rec wrapped_of_js : 'a . (Ojs.t -> 'a) -> Ojs.t -> 'a wrapped =
        let f a_of_js x = Wrapped (a_of_js x) in f
      and wrapped_to_js : 'a . ('a -> Ojs.t) -> 'a wrapped -> Ojs.t =
        let f a_to_js = function | Wrapped a -> a_to_js a in f
      type u =
        | Unknown of Ojs.t 
        | T of t 
        | WrappedT of t wrapped 
      and t = [ `U of u ] dummy
      let rec (u_of_js : Ojs.t -> u) =
        fun x15 ->
          let x16 = x15 in
          match Ojs.type_of (Ojs.get_prop_ascii x16 "type") with
          | "number" ->
              (match Ojs.int_of_js (Ojs.get_prop_ascii x16 "type") with
               | _ -> Unknown x16)
          | "string" ->
              (match Ojs.string_of_js (Ojs.get_prop_ascii x16 "type") with
               | "t" -> T (t_of_js x16)
               | "wrapped_t" -> WrappedT (wrapped_of_js t_of_js x16)
               | _ -> Unknown x16)
          | "boolean" ->
              (match Ojs.bool_of_js (Ojs.get_prop_ascii x16 "type") with
               | _ -> Unknown x16)
          | _ -> Unknown x16
      and (u_to_js : u -> Ojs.t) =
        fun x10 ->
          match x10 with
          | Unknown x11 -> x11
          | T x12 -> t_to_js x12
          | WrappedT x13 -> wrapped_to_js t_to_js x13
      and (t_of_js : Ojs.t -> t) = Obj.magic
      and (t_to_js : t -> Ojs.t) = Obj.magic
      type ('a, 'b) base = [ `BaseA of 'a  | `BaseB of 'b ] dummy
      let rec base_of_js :
        'a 'b . (Ojs.t -> 'a) -> (Ojs.t -> 'b) -> Ojs.t -> ('a, 'b) base =
        fun _ -> fun _ -> Obj.magic
      and base_to_js :
        'a 'b . ('a -> Ojs.t) -> ('b -> Ojs.t) -> ('a, 'b) base -> Ojs.t =
        fun _ -> fun _ -> Obj.magic
      type base1 = (int, string) base
      let rec (base1_of_js : Ojs.t -> base1) =
        fun x21 -> base_of_js Ojs.int_of_js Ojs.string_of_js x21
      and (base1_to_js : base1 -> Ojs.t) =
        fun x18 -> base_to_js Ojs.int_to_js Ojs.string_to_js x18
      type base2 = (string, int) base
      let rec (base2_of_js : Ojs.t -> base2) =
        fun x27 -> base_of_js Ojs.string_of_js Ojs.int_of_js x27
      and (base2_to_js : base2 -> Ojs.t) =
        fun x24 -> base_to_js Ojs.string_to_js Ojs.int_to_js x24
    end)[@merlin.hide ]) 
module Issue109 : sig type t = [ `S of string  | `I of int ] end =
  ((struct
      [@@@js.dummy "!! This code has been generated by gen_js_api !!"]
      [@@@ocaml.warning "-7-32-39"]
      type t = [ `S of string  | `I of int ]
      let rec (t_of_js : Ojs.t -> t) =
        fun x35 ->
          let x36 = x35 in
          match Ojs.type_of x36 with
          | "number" -> (match Ojs.int_of_js x36 with | x38 -> `I x38)
          | "string" -> (match Ojs.string_of_js x36 with | x37 -> `S x37)
          | _ -> assert false
      and (t_to_js : t -> Ojs.t) =
        fun x32 ->
          match x32 with
          | `S x33 -> Ojs.string_to_js x33
          | `I x34 -> Ojs.int_to_js x34
    end)[@merlin.hide ]) 
