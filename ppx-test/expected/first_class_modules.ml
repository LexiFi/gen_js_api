[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
module Console =
  struct
    let (log : (module Ojs.T with type t = 'a) -> 'a -> unit) = fun (type a)
      ->
      fun ((module A)  : (module Ojs.T with type t = a)) ->
        fun (x1 : a) ->
          ignore
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "console") "log"
               [|(A.t_to_js x1)|])
    let (log2 :
      (module Ojs.T with type t = 'a) ->
        (module Ojs.T with type t = 'b) -> 'a -> 'b -> unit)
      = fun (type a) -> fun (type b) ->
      fun ((module A)  : (module Ojs.T with type t = a)) ->
        fun ((module B)  : (module Ojs.T with type t = b)) ->
          fun (x2 : a) ->
            fun (x3 : b) ->
              ignore
                (Ojs.call (Ojs.get_prop_ascii Ojs.global "console") "log"
                   [|(A.t_to_js x2);(B.t_to_js x3)|])
    let (log3 :
      (module Ojs.T with type t = 'a) ->
        (module Ojs.T with type t = 'b) ->
          (module Ojs.T with type t = 'c) -> 'a -> 'b -> 'c -> unit)
      = fun (type a) -> fun (type b) -> fun (type c) ->
      fun ((module A)  : (module Ojs.T with type t = a)) ->
        fun ((module B)  : (module Ojs.T with type t = b)) ->
          fun ((module C)  : (module Ojs.T with type t = c)) ->
            fun (x4 : a) ->
              fun (x5 : b) ->
                fun (x6 : c) ->
                  ignore
                    (Ojs.call (Ojs.get_prop_ascii Ojs.global "console") "log"
                       [|(A.t_to_js x4);(B.t_to_js x5);(C.t_to_js x6)|])
  end
module Console2 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8 : Ojs.t) -> x8
    and t_to_js : t -> Ojs.t = fun (x7 : Ojs.t) -> x7
    let (log : (module Ojs.T with type t = 'a) -> t -> 'a -> unit) = fun
      (type a) ->
      fun ((module A)  : (module Ojs.T with type t = a)) ->
        fun (x10 : t) ->
          fun (x9 : a) ->
            ignore (Ojs.call (t_to_js x10) "log" [|(A.t_to_js x9)|])
    let (log2 :
      (module Ojs.T with type t = 'a) ->
        (module Ojs.T with type t = 'b) -> t -> 'a -> 'b -> unit)
      = fun (type a) -> fun (type b) ->
      fun ((module A)  : (module Ojs.T with type t = a)) ->
        fun ((module B)  : (module Ojs.T with type t = b)) ->
          fun (x13 : t) ->
            fun (x11 : a) ->
              fun (x12 : b) ->
                ignore
                  (Ojs.call (t_to_js x13) "log"
                     [|(A.t_to_js x11);(B.t_to_js x12)|])
    let (log3 :
      (module Ojs.T with type t = 'a) ->
        (module Ojs.T with type t = 'b) ->
          (module Ojs.T with type t = 'c) -> t -> 'a -> 'b -> 'c -> unit)
      = fun (type a) -> fun (type b) -> fun (type c) ->
      fun ((module A)  : (module Ojs.T with type t = a)) ->
        fun ((module B)  : (module Ojs.T with type t = b)) ->
          fun ((module C)  : (module Ojs.T with type t = c)) ->
            fun (x17 : t) ->
              fun (x14 : a) ->
                fun (x15 : b) ->
                  fun (x16 : c) ->
                    ignore
                      (Ojs.call (t_to_js x17) "log"
                         [|(A.t_to_js x14);(B.t_to_js x15);(C.t_to_js x16)|])
  end
module Console3 =
  struct
    module Log =
      struct
        let (_1 : (module Ojs.T with type t = 'a) -> 'a -> unit) = fun (type
          a) ->
          fun ((module A)  : (module Ojs.T with type t = a)) ->
            fun (x18 : a) ->
              Ojs.unit_of_js
                (Ojs.apply
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "console") "log")
                   [|(A.t_to_js x18)|])
        let (_2 :
          (module Ojs.T with type t = 'a) ->
            (module Ojs.T with type t = 'b) -> 'a -> 'b -> unit)
          = fun (type a) -> fun (type b) ->
          fun ((module A)  : (module Ojs.T with type t = a)) ->
            fun ((module B)  : (module Ojs.T with type t = b)) ->
              fun (x19 : a) ->
                fun (x20 : b) ->
                  Ojs.unit_of_js
                    (Ojs.apply
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Ojs.global "console") "log")
                       [|(A.t_to_js x19);(B.t_to_js x20)|])
        let (_3 :
          (module Ojs.T with type t = 'a) ->
            (module Ojs.T with type t = 'b) ->
              (module Ojs.T with type t = 'c) -> 'a -> 'b -> 'c -> unit)
          = fun (type a) -> fun (type b) -> fun (type c) ->
          fun ((module A)  : (module Ojs.T with type t = a)) ->
            fun ((module B)  : (module Ojs.T with type t = b)) ->
              fun ((module C)  : (module Ojs.T with type t = c)) ->
                fun (x21 : a) ->
                  fun (x22 : b) ->
                    fun (x23 : c) ->
                      Ojs.unit_of_js
                        (Ojs.apply
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Ojs.global "console") "log")
                           [|(A.t_to_js x21);(B.t_to_js x22);(C.t_to_js x23)|])
      end
  end
module Array =
  struct
    type 'a t = Ojs.t
    let rec t_of_js : 'a . (Ojs.t -> 'a) -> Ojs.t -> 'a t = fun (type __a) ->
      fun (__a_of_js : Ojs.t -> __a) -> fun (x25 : Ojs.t) -> x25
    and t_to_js : 'a . ('a -> Ojs.t) -> 'a t -> Ojs.t = fun (type __a) ->
      fun (__a_to_js : __a -> Ojs.t) -> fun (x24 : Ojs.t) -> x24
    let (create : (module Ojs.T with type t = 'a) -> 'a list -> 'a t) = fun
      (type a) ->
      fun ((module A)  : (module Ojs.T with type t = a)) ->
        fun (x26 : a list) ->
          t_of_js A.t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Array")
               (let x27 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                List.iter
                  (fun (x28 : a) ->
                     ignore (Ojs.call x27 "push" [|(A.t_to_js x28)|])) x26;
                x27))
    let (create' : (module Ojs.T with type t = 'a) -> 'a list -> 'a t) = fun
      (type a) ->
      fun ((module A)  : (module Ojs.T with type t = a)) ->
        fun (x30 : a list) ->
          t_of_js A.t_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Array") "apply"
               [|Ojs.null;((let x31 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            List.iter
                              (fun (x32 : a) ->
                                 ignore
                                   (Ojs.call x31 "push" [|(A.t_to_js x32)|]))
                              x30;
                            x31))|])
    let (push : (module Ojs.T with type t = 'a) -> 'a t -> 'a -> unit) = fun
      (type a) ->
      fun ((module A)  : (module Ojs.T with type t = a)) ->
        fun (x35 : a t) ->
          fun (x34 : a) ->
            ignore
              (Ojs.call (t_to_js A.t_to_js x35) "push" [|(A.t_to_js x34)|])
    let (pop : (module Ojs.T with type t = 'a) -> 'a t -> 'a option) = fun
      (type a) ->
      fun ((module A)  : (module Ojs.T with type t = a)) ->
        fun (x37 : a t) ->
          Ojs.option_of_js A.t_of_js
            (Ojs.call (t_to_js A.t_to_js x37) "pop" [||])
  end
